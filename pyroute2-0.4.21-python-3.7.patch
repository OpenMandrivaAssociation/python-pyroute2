--- pyroute2-0.4.21/pyroute2/devlink.py.omv~	2018-03-06 15:34:27.436425190 +0100
+++ pyroute2-0.4.21/pyroute2/devlink.py	2018-03-06 15:34:55.742786393 +0100
@@ -17,14 +17,14 @@ class DL(DevlinkSocket):
 
         # get specific async kwarg
         if 'async' in kwarg:
-            async = kwarg['async']
+            asynk = kwarg['async']
             del kwarg['async']
         else:
-            async = False
+            asynk = False
 
         # align groups with async
         if groups is None:
-            groups = ~0 if async else 0
+            groups = ~0 if asynk else 0
 
         # continue with init
         super(DL, self).__init__(*argv, **kwarg)
@@ -32,7 +32,7 @@ class DL(DevlinkSocket):
         # do automatic bind
         # FIXME: unfortunately we can not omit it here
         try:
-            self.bind(groups, async)
+            self.bind(groups, asynk)
         except:
             # thanks to jtluka at redhat.com and the LNST
             # team for the fixed fd leak
--- pyroute2-0.4.21/pyroute2/iwutil.py.omv~	2018-03-06 15:39:01.193858416 +0100
+++ pyroute2-0.4.21/pyroute2/iwutil.py	2018-03-06 15:39:21.766093070 +0100
@@ -153,21 +153,21 @@ class IW(NL80211):
 
         # get specific async kwarg
         if 'async' in kwarg:
-            async = kwarg['async']
+            asynk = kwarg['async']
             del kwarg['async']
         else:
-            async = False
+            asynk = False
 
         # align groups with async
         if groups is None:
-            groups = ~0 if async else 0
+            groups = ~0 if asynk else 0
 
         # continue with init
         super(IW, self).__init__(*argv, **kwarg)
 
         # do automatic bind
         # FIXME: unfortunately we can not omit it here
-        self.bind(groups, async)
+        self.bind(groups, asynk)
 
     def del_interface(self, dev):
         '''
--- pyroute2-0.4.21/pyroute2/netlink/devlink/__init__.py.omv~	2018-03-06 15:37:02.967406738 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/devlink/__init__.py	2018-03-06 15:37:11.605516588 +0100
@@ -126,6 +126,6 @@ class DevlinkSocket(GenericNetlinkSocket
         GenericNetlinkSocket.__init__(self)
         self.marshal = MarshalDevlink()
 
-    def bind(self, groups=0, async=False):
+    def bind(self, groups=0, asynk=False):
         GenericNetlinkSocket.bind(self, 'devlink', devlinkcmd,
-                                  groups, None, async)
+                                  groups, None, asynk)
--- pyroute2-0.4.21/pyroute2/netlink/event/__init__.py.omv~	2018-03-06 15:37:56.978093283 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/event/__init__.py	2018-03-06 15:38:03.019170029 +0100
@@ -18,8 +18,8 @@ class EventSocket(GenericNetlinkSocket):
         for group in self.mcast_groups:
             self.add_membership(group)
 
-    def bind(self, groups=0, async=False):
+    def bind(self, groups=0, asynk=False):
         GenericNetlinkSocket.bind(self,
                                   self.genl_family,
                                   self.marshal_class.msg_map[0],
-                                  groups, None, async)
+                                  groups, None, asynk)
--- pyroute2-0.4.21/pyroute2/netlink/generic/__init__.py.omv~	2018-03-06 15:37:41.096891486 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/generic/__init__.py	2018-03-06 15:37:46.282957391 +0100
@@ -26,14 +26,14 @@ class GenericNetlinkSocket(NetlinkSocket
 
     mcast_groups = {}
 
-    def bind(self, proto, msg_class, groups=0, pid=None, async=False):
+    def bind(self, proto, msg_class, groups=0, pid=None, asynk=False):
         '''
         Bind the socket and performs generic netlink
         proto lookup. The `proto` parameter is a string,
         like "TASKSTATS", `msg_class` is a class to
         parse messages with.
         '''
-        NetlinkSocket.bind(self, groups, pid, async)
+        NetlinkSocket.bind(self, groups, pid, asynk)
         self.marshal.msg_map[GENL_ID_CTRL] = ctrlmsg
         msg = self.discovery(proto)
         self.prid = msg.get_attr('CTRL_ATTR_FAMILY_ID')
--- pyroute2-0.4.21/pyroute2/netlink/nl80211/__init__.py.omv~	2018-03-06 15:38:11.030271789 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/nl80211/__init__.py	2018-03-06 15:38:17.091348770 +0100
@@ -638,6 +638,6 @@ class NL80211(GenericNetlinkSocket):
         GenericNetlinkSocket.__init__(self)
         self.marshal = MarshalNl80211()
 
-    def bind(self, groups=0, async=False):
+    def bind(self, groups=0, asynk=False):
         GenericNetlinkSocket.bind(self, 'nl80211', nl80211cmd,
-                                  groups, None, async)
+                                  groups, None, asynk)
--- pyroute2-0.4.21/pyroute2/netlink/nlsocket.py.omv~	2018-03-06 15:38:26.825468368 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/nlsocket.py	2018-03-06 15:38:51.497748120 +0100
@@ -11,7 +11,7 @@ asynchronous I/O
 ----------------
 
 To run async reader thread, one should call
-`NetlinkSocket.bind(async=True)`. In that case a
+`NetlinkSocket.bind(asynk=True)`. In that case a
 background thread will be launched. The thread will
 automatically collect all the messages and store
 into a userspace buffer.
@@ -903,7 +903,7 @@ class NetlinkSocket(NetlinkMixin):
         msg.encode()
         return self._sock.sendto(msg.data, addr)
 
-    def bind(self, groups=0, pid=None, async=False):
+    def bind(self, groups=0, pid=None, asynk=False):
         '''
         Bind the socket to given multicast groups, using
         given pid.
@@ -936,7 +936,7 @@ class NetlinkSocket(NetlinkMixin):
             else:
                 raise KeyError('no free address available')
         # all is OK till now, so start async recv, if we need
-        if async:
+        if asynk:
             def recv_plugin(*argv, **kwarg):
                 data_in = self.buffer_queue.get()
                 if isinstance(data_in, Exception):
--- pyroute2-0.4.21/pyroute2/netlink/rtnl/iprsocket.py.omv~	2018-03-06 15:37:21.354640544 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/rtnl/iprsocket.py	2018-03-06 15:37:32.262779209 +0100
@@ -46,8 +46,8 @@ class IPRSocketMixin(object):
     def clone(self):
         return type(self)()
 
-    def bind(self, groups=rtnl.RTNL_GROUPS, async=False):
-        super(IPRSocketMixin, self).bind(groups, async=async)
+    def bind(self, groups=rtnl.RTNL_GROUPS, asynk=False):
+        super(IPRSocketMixin, self).bind(groups, asynk=asynk)
 
     def _gate(self, msg, addr):
         msg.reset()
--- pyroute2-0.4.21/tests/general/test_ipdb.py.omv~	2018-03-06 15:40:37.493963840 +0100
+++ pyroute2-0.4.21/tests/general/test_ipdb.py	2018-03-06 15:40:44.172041122 +0100
@@ -2930,9 +2930,9 @@ class TestMisc(object):
             def __init__(self):
                 self.called = set()
 
-            def bind(self, groups=None, async=None):
+            def bind(self, groups=None, asynk=None):
                 self.called.add('bind')
-                assert async in (True, False)
+                assert asynk in (True, False)
                 assert isinstance(groups, int)
                 raise NotImplementedError('mock thee')
 
--- pyroute2-0.4.21/tests/general/test_stress.py.omv~	2018-03-06 15:40:21.250776186 +0100
+++ pyroute2-0.4.21/tests/general/test_stress.py	2018-03-06 15:40:24.830817506 +0100
@@ -56,7 +56,7 @@ class TestRespawn(object):
     def test_respawn_iproute_async(self):
         for _ in range(RESPAWNS):
             with IPRoute() as i:
-                i.bind(async=True)
+                i.bind(asynk=True)
                 i.link_lookup(ifname='lo')
 
     def test_respawn_ipdb(self):
--- pyroute2-0.4.21/pyroute2/netlink/rtnl/riprsocket.py.omv~	2018-03-06 15:51:24.766696104 +0100
+++ pyroute2-0.4.21/pyroute2/netlink/rtnl/riprsocket.py	2018-03-06 15:51:34.759818001 +0100
@@ -10,8 +10,8 @@ class RawIPRSocketMixin(object):
         super(RawIPRSocketMixin, self).__init__(NETLINK_ROUTE, fileno=fileno)
         self.marshal = MarshalRtnl()
 
-    def bind(self, groups=rtnl.RTNL_GROUPS, async=False):
-        super(RawIPRSocketMixin, self).bind(groups, async=async)
+    def bind(self, groups=rtnl.RTNL_GROUPS, asynk=False):
+        super(RawIPRSocketMixin, self).bind(groups, asynk=asynk)
 
 
 class RawIPRSocket(RawIPRSocketMixin, NetlinkSocket):
